<?xml version="1.0"?>
<launch>

    <!-- Launch configuration -->
    <arg name="sim" default="false"/>
    <arg name="rgb_vision" default="true"/>
    <arg name="obstacle_avoidance" default="true"/>

    <!-- Arm configuration -->
    <arg name="arm" default="gen3"/>
    <arg name="dof" default="7" if="$(eval arg('arm') == 'gen3')"/> <!-- Number of degrees of freedom of the arm -->
    <arg name="vision" default="false"/> <!-- True if the arm has a Vision module -->
    <arg name="use_hard_limits" default="false"/> <!-- Set soft limits as hard limits (Gen3 only) -->

    <!-- Camera configuration -->
    <arg name="left_camera_name" default="left_camera"/> <!--Left camera name-->
    <!-- <arg name="left_camera_serial" default="19440080"/> Left MONO camera serial number -->
    <arg name="left_camera_serial" default="22423939"/> <!--Left RGB camera serial number-->
    <arg name="right_camera_name" default="right_camera"/> <!--Right camera name-->
    <!-- <arg name="right_camera_serial" default="19440078"/> Right MONO camera serial number -->
    <arg name="right_camera_serial" default="22423944"/> <!--Right RGB camera serial number-->
    <arg name="set_frame_rate" default="false"/> <!--Enable set frame rate. If false camera will acquire maximum number of frames-->
    <arg name="frame_rate" default="60"/> <!--Set frame rate-->
    <arg name="run_stereo_image_proc" default="true"/> <!--Run stereo image processing nodelet-->

    <!-- Namespace -->
    <arg name="robot_name" default="my_$(arg arm)"/>
    <arg name="prefix" default=""/>

    <!-- Capture configuration -->
    <arg name="N" default="32"/> <!-- Number of images to capture -->
    <arg name="sample_rad" default="0.175"/> <!-- Radius of the sphere -->
    <arg name="sample_point" default="{0.55,0.0,0}"/> <!-- Center of the sphere -->
    <arg name="capture" default="true"/> <!-- True if you want to capture images -->
    <arg name="dataset_file_path" default="/media/alex/Data/data/tracking"/> <!-- Path to the dataset folder -->

    <!-- Make parameters for acquire data sphere -->
    <param name="N" value="$(arg N)"/>
    <param name="sample_rad" value="$(arg sample_rad)"/>
    <param name="sample_point" value="$(arg sample_point)"/>
    <param name="capture" value="$(arg capture)"/>
    <param name="dataset_file_path" value="$(arg dataset_file_path)"/>

    <!-- Arguments for aruco tracking -->
    <arg name="marker_size" doc="Size of the ArUco marker used, in meters" default="0.01600" />
    <arg name="camera_namespace" default="/left" />
    <arg name="camera_frame" default="left_camera_optical" />
    <arg name="ee_frame" default="left_camera_virtual_lens"/>
    <arg name="dictionary" default="DICT_6X6_250" />

    <!-- Start robot launch files -->
    <!-- Real robot -->
    <include file="$(find kortex_driver)/launch/kortex_driver.launch" if="$(eval not arg('sim'))"> 
        <arg name="arm" value="$(arg arm)"/>
        <arg name="dof" value="$(arg dof)"/>
        <arg name="vision" value="$(arg vision)"/>
        <arg name="use_hard_limits" value="$(arg use_hard_limits)"/>
        <arg name="start_rviz" value="true"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="prefix" value="$(arg prefix)"/>
    </include>
    <!-- Simulated robot -->
     <include file="$(find kortex_gazebo)/launch/spawn_kortex_robot.launch" unless="$(eval not arg('sim'))"> 
        <arg name="arm" value="$(arg arm)"/>
        <arg name="dof" value="$(arg dof)"/>
        <arg name="vision" value="$(arg vision)"/>
        <arg name="start_gazebo" value="true"/>
        <arg name="start_rviz" value="true"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="prefix" value="$(arg prefix)"/>
    </include>

    <!-- Start camera launch files -->
    <!-- Left Camera Launch -->
    <include file="$(find spinnaker_camera_driver)/launch/camera.launch" if="$(eval arg('rgb_vision'))">
        <arg name="camera_name" value="$(arg left_camera_name)"/>
        <arg name="camera_serial" value="$(arg left_camera_serial)"/>
        <arg name="isp_enable" value="True" /> 
        <arg name="encoding" value="BayerRG8" />
        <arg name="color_balance" value="Once" /> 
        <arg name="control_frame_rate" value="$(arg set_frame_rate)"/>
        <arg name="frame_rate" value="$(arg frame_rate)"/>
    </include>
    <!-- Right Camera Launch -->
    <include file="$(find spinnaker_camera_driver)/launch/camera.launch" if="$(eval arg('rgb_vision'))">
        <arg name="camera_name" value="$(arg right_camera_name)"/>
        <arg name="camera_serial" value="$(arg right_camera_serial)"/>
        <arg name="isp_enable" value="True" /> 
        <arg name="encoding" value="BayerRG8" />
        <arg name="color_balance" value="Once" /> 
        <arg name="control_frame_rate" value="$(arg set_frame_rate)"/>
        <arg name="frame_rate" value="$(arg frame_rate)"/>
    </include>

    <!-- Stereo image processing nodelet -->
    <group if="$(arg run_stereo_image_proc)" >
      <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" >
        <param name="approximate_sync" value="true"/>
        <!-- Remap topics so that this node takes /(arg camera_name) topics and gives them to stereo_image_proc in the appropriate /left /right format -->
        <remap from="left/image_raw" to="$(arg left_camera_name)/image_raw"/>
        <remap from="left/camera_info" to="$(arg left_camera_name)/camera_info"/>
        <remap from="right/image_raw" to="$(arg right_camera_name)/image_raw"/>
        <remap from="right/camera_info" to="$(arg right_camera_name)/camera_info"/>
      </node>
    </group>

    <!-- Launch save images server node -->
    <node pkg="acquisition" type="save_images_server" name="save_images_server" respawn="true" output="screen" />

    <!-- Launch tracking node -->
    <node pkg="acquisition" type="tracking" name="tracking" respawn="true" ns="my_gen3" output="screen" />

    <!-- Launch safety obstacles node -->
    <node pkg="acquisition" type="safety_obstacles" name="safety_obstacles" respawn="false" ns="my_gen3" output="screen" if="$(eval arg('obstacle_avoidance'))"/>
    
    <!-- start ArUco -->
    <node pkg="easy_aruco" type="easy_aruco_node" name="easy_aruco_node" output="screen" >
        <param name="object_type" value="aruco_marker" />

        <param name="camera_namespace" value="$(arg camera_namespace)" />
        <param name="dictionary" value="$(arg dictionary)" />

        <param name="camera_frame" value="$(arg camera_frame)" />
        <param name="reference_frame" value="$(arg ee_frame)" />

        <param name="marker_size" value="$(arg marker_size)" />
        <remap from="$(arg camera_namespace)/camera_info" to="$(arg camera_namespace)_camera/camera_info" />
    </node>

</launch>
